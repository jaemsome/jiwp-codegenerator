<?php

class CG_SerialPortController extends CG_Controller
{
    protected function _GenerateCCode($model, $processor_type='')
    {
        $code = '';
//        if(!$model->allAttributesEmpty())
//        {
//            $code = PHP_EOL.'/************************************************'.PHP_EOL;
//            $code .= ' * uart'.$this->type.'.c is automatically generated by PicCodeGen.'.PHP_EOL;
//            $code .= ' * Please do not change.'.PHP_EOL;
//            $code .= ' *'.PHP_EOL;
//            $code .= ' * To obtain a copy of PicCodeGen go to'.PHP_EOL;
//            $code .= ' * http://www.kmitechnology.com/.'.PHP_EOL;
//            $code .= ' *'.PHP_EOL;
//            $code .= ' ************************************************/'.PHP_EOL;
//            $code .= PHP_EOL;
//            $code .= PHP_EOL;
//            $code .= "#include <{$processorType}.h>".PHP_EOL;
//            $code .= PHP_EOL;
//            $code .= '#define USE_AND_OR'.PHP_EOL;
//            $code .= '#include "uart.h"'.PHP_EOL;
//            $code .= '#include "uart'.$this->type.'.h"'.PHP_EOL;
//            $code .= '#include "pinAssign.h"'.PHP_EOL;
//            $code .= PHP_EOL;
//            if($this->type == 1)
//                $code .= '#include "config.c"'.PHP_EOL;
////            $code .= '_CONFIG1(JTAGEN_OFF & GCP_OFF & GWRP_OFF & BKBUG_ON & ICS_PGx1 & FWDTEN_OFF)'.PHP_EOL;
////            $code .= '_CONFIG2(IESO_OFF & FNOSC_PRIPLL & OSCIOFNC_ON & POSCMOD_HS)'.PHP_EOL;
//            $code .= PHP_EOL;
//            $code .= '#define BRATE  '.$this->constantBR.PHP_EOL;
//            $code .= PHP_EOL;
//            // Interrupt is used
//            if($this->interrupt == 'yes')
//            {
//                $code .= '#define BUFLEN '.$this->bufferSize.PHP_EOL;
//                $code .= 'unsigned char U'.$this->type.'buf[BUFLEN];'.PHP_EOL;
//                $code .= 'unsigned int U'.$this->type.'ptr;'.PHP_EOL;
//                $code .= 'unsigned int U'.$this->type.'gptr;'.PHP_EOL;
//                $code .= 'unsigned int U'.$this->type.'cnt;'.PHP_EOL;
//            }
//            $code .= PHP_EOL;
//
//            // UART INIT
//            $code .= 'void'.PHP_EOL;
//            $code .= 'uart'.$this->type.'Init(void)'.PHP_EOL;
//            $code .= '{'.PHP_EOL;
//            if($this->BRGH == 0)
//                $code .= '     OpenUART'.$this->type.'(UART_EN | UART_BRGH_FOUR, UART_TX_ENABLE, BRATE);'.PHP_EOL;
//            else
//                $code .= '     OpenUART'.$this->type.'(UART_EN | UART_BRGH_SIXTEEN, UART_TX_ENABLE, BRATE);'.PHP_EOL;
//            if($this->interrupt == 'yes')
//            {
//                $code .= '     ConfigIntUART'.$this->type.'(UART_RX_INT_PR4 | UART_RX_INT_EN);'.PHP_EOL;
//                $code .= '     U'.$this->type.'ptr = U'.$this->type.'gptr = U'.$this->type.'cnt = 0;'.PHP_EOL;
//                $code .= ($this->type == 1) ? '     IFS0bits' : '     IFS1bits';
//                $code .= '.U'.$this->type.'RXIF = 0;'.PHP_EOL;
//            }
//            $code .= '} // end uart'.$this->type.'Init'.PHP_EOL;
//            $code .= PHP_EOL;
//
//            // Attribute
//            if($this->interrupt == 'yes')
//            {
//                $code .= 'void __attribute__ ((auto_psv)) _ISR _U'.$this->type.'RXInterrupt(void)'.PHP_EOL;
//                $code .= '{'.PHP_EOL;
//                $code .= '     while (U'.$this->type.'STAbits.URXDA) {'.PHP_EOL;
//                $code .= '          U'.$this->type.'buf[U'.$this->type.'ptr++] = U'.$this->type.'RXREG;'.PHP_EOL;
//                $code .= '          U'.$this->type.'ptr &= BUFLEN-1;'.PHP_EOL;
//                $code .= '          if (U'.$this->type.'ptr == U'.$this->type.'gptr) {'.PHP_EOL;
//                $code .= '              U'.$this->type.'gptr++;'.PHP_EOL;
//                $code .= '              U'.$this->type.'gptr &= BUFLEN-1;'.PHP_EOL;
//                $code .= '          } else { '.PHP_EOL;
//                $code .= '              U'.$this->type.'cnt++;'.PHP_EOL;
//                $code .= '          }'.PHP_EOL;
//                $code .= '     }'.PHP_EOL;
//                $code .= '     // clear interrupts?'.PHP_EOL;
//                $code .= ($this->type == 1) ? '     IFS0bits' : '     IFS1bits';
//                $code .= '.U'.$this->type.'RXIF = 0;'.PHP_EOL;
//                $code .= '} // end U'.$this->type.'RXInterrupt'.PHP_EOL;
//                $code .= PHP_EOL;
//            }
//
//            //UART UARTPUT
//            $code .= 'void'.PHP_EOL;
//            $code .= 'uart'.$this->type.'put(unsigned char c)'.PHP_EOL;
//            $code .= '{'.PHP_EOL;
//            $code .= '     while (U'.$this->type.'STAbits.UTXBF)'.PHP_EOL;
//            $code .= '           ;'.PHP_EOL;
//            $code .= '     U'.$this->type.'TXREG = c;'.PHP_EOL;
//            $code .= '} // end uart'.$this->type.'put'.PHP_EOL;
//            $code .= PHP_EOL;
//
//            // UART IsChar
//            $code .= 'int'.PHP_EOL;
//            $code .= 'uart'.$this->type.'IsChar(void)'.PHP_EOL;
//            $code .= '{'.PHP_EOL;
//            if($this->interrupt == 'yes')
//                $code .= '     return U'.$this->type.'cnt;'.PHP_EOL;
//            else
//                $code .= '     return U'.$this->type.'STAbits.URXDA;'.PHP_EOL;
//            $code .= '} // end uart'.$this->type.'IsChar'.PHP_EOL;
//            $code .= PHP_EOL;
//
//            // UART GetChar
//            $code .= 'int'.PHP_EOL;
//            $code .= 'uart'.$this->type.'GetChar(void)'.PHP_EOL;
//            $code .= '{'.PHP_EOL;
//            if($this->interrupt == 'yes')
//            {
//                $code .= '     int result;'.PHP_EOL;
//                $code .= '     result = 0;'.PHP_EOL;
//                $code .= '     // while (!U'.$this->type.'STAbits.URXDA);'.PHP_EOL;
//                $code .= '     // return U'.$this->type.'RXREG;'.PHP_EOL;
//                $code .= '     if (U'.$this->type.'cnt)'.PHP_EOL;
//                $code .= '     {'.PHP_EOL;
//                $code .= '         result = U'.$this->type.'buf[U'.$this->type.'gptr++];'.PHP_EOL;
//                $code .= '         U'.$this->type.'gptr &= BUFLEN-1;'.PHP_EOL;
//                $code .= '         U'.$this->type.'cnt--;'.PHP_EOL;
//                $code .= '     }'.PHP_EOL;
//                $code .= '     return result;'.PHP_EOL;
//            }
//            else
//                $code .= '     return U'.$this->type.'RXREG;'.PHP_EOL;
//            $code .= '} // end uart'.$this->type.'GetChar'.PHP_EOL;
//            $code .= PHP_EOL;
//
//            // UART PS
//            $code .= 'void'.PHP_EOL;
//            $code .= 'uart'.$this->type.'ps(unsigned char *st)'.PHP_EOL;
//            $code .= '{'.PHP_EOL;
//            $code .= '     int i;'.PHP_EOL;
//            $code .= PHP_EOL;
//            $code .= '     i = 0;'.PHP_EOL;
//            $code .= '     while(st[i]) {'.PHP_EOL;
//            $code .= '        uart'.$this->type.'put(st[i++]);'.PHP_EOL;
//            $code .= '     }'.PHP_EOL;
//            $code .= '} // end uart'.$this->type.'ps'.PHP_EOL;
//            $code .= PHP_EOL;
//
//            $this->writeFile($code);
//        }
        return $code;
    }
    
    protected function _GenerateHCode($model=null, $processor_type='')
    {
        $config = 'UART_EN | UART_IDLE_CON';
        
        if(!empty($model->IREnable))
            $config .= ' | UART_IrDA_ENABLE';
        else
            $config .= ' | UART_IrDA_DISABLE';
        
        if(!empty($model->RTSMode))
            $config .= ' | UART_MODE_SIMPLEX';
        else
            $config .= ' | UART_MODE_FLOW';
        
        switch($model->flowControl)
        {
            case 0:
                $config .= ' | UART_UEN_00';
                break;
            case 1:
                $config .= ' | UART_UEN_01';
                break;
            case 2:
                $config .= ' | UART_UEN_10';
                break;
            case 3:
                $config .= ' | UART_UNE_11';
                break;
            default :
                $config .= ' | UART_UEN_00';
        }
        
        if(!empty($model->wake))
            $config .= ' | UART_EN_WAKE';
        else
            $config .= ' | UART_DIS_WAKE';
        
        if(!empty($model->loopBack))
            $config .= ' | UART_EN_LOOPBACK';
        else
            $config .= ' | UART_DIS_LOOPBACK';
        
        if(!empty($model->autoBaud))
            $config .= ' | UART_EN_ABAUD';
        else
            $config .= ' | UART_DIS_ABAUD';
        
        switch($model->dataBits)
        {
            case 8:
                switch($model->parity)
                {
                    case 0:
                        $config .= ' | UART_NO_PAR_8BIT';
                        break;
                    case 1:
                        $config .= ' | UART_EVEN_PAR_8BIT';
                        break;
                    case 2:
                        $config .= ' | UART_ODD_PAR_8BIT';
                        break;
                }
                break;
            case 9:
                $config .= ' | UART_NO_PAR_9BIT';
                break;
            default :
                $config .= ' | UART_NO_PAR_8BIT';
        }
        
        if(!empty($model->BRGH))
            $config .= ' | UART_BRGH_FOUR';
        else
            $config .= ' | UART_BRGH_SIXTEEN';
        
        if($model->stopBits == '1')
            $config .= ' | UART_1STOPBIT';
        else
            $config .= ' | UART_2STOPBITS';
        
        $config_var = '';
        if($model->type == 2)
            $config_var = '2';
        
        $code = '/************************************************'.PHP_EOL;
        $code .= ' * uart'.$model->type.'.h is automatically generated by theEngineerTutor.com.'.PHP_EOL;
        $code .= ' * Please do not change.'.PHP_EOL;
        $code .= ' *'.PHP_EOL;
        $code .= ' * To obtain a copy of PicCodeGen go to'.PHP_EOL;
        $code .= ' * http://www.theEngineerTutor.com/.'.PHP_EOL;
        $code .= ' *'.PHP_EOL;
        $code .= ' ************************************************/'.PHP_EOL;
        $code .= PHP_EOL.PHP_EOL;
        $code .= "#define BRATE{$config_var}  ".$model->constantBR.PHP_EOL;
        $code .= PHP_EOL;
        $code .= 'void uart'.$model->type.'ps(unsigned char *st);'.PHP_EOL;
        $code .= 'int uart'.$model->type.'GetChar(void);'.PHP_EOL;
        $code .= 'int uart'.$model->type.'IsChar(void);'.PHP_EOL;
        $code .= 'void uart'.$model->type.'put(unsigned char c);'.PHP_EOL;
        $code .= 'void uart'.$model->type.'Init(unsigned int config'.$config_var.'1, unsigned int config2'.$config_var.', unsigned int brate'.$config_var.');'.PHP_EOL;
        $code .= PHP_EOL;
        $code .= "int config{$config_var}1 = {$config};".PHP_EOL.PHP_EOL;
        $code .= "int config2{$config_var} = UART_TX_ENABLE;".PHP_EOL;
        
        return $code;
    }
}